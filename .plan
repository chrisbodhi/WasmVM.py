THE GOAL HERE IS TO CREATE A SIMPLE WASM-LIKE MACHINE IN PYTHON
IN ORDER TO LEARN MORE COMPLETELY WHAT WASM DOES AND HOW.

- üèÉ‚Äç‚ôÇÔ∏è zomg, unit tests, please. push(6), push(-6), sub() --> 12
- ‚úÖ fix defect: stack was [6], add instructions via web client: [{name: "push", type: "i32", value: 12}, {name: "div", type: "i32"}]; running this failed with a 500 error; float and int issues? got something similar with "add"
- üèÉ‚Äç‚ôÇÔ∏è create a visual representation of the entire machine that can be displayed in a web page
    - ‚úÖ create an api for interacting with the machine
    - ‚úÖ create a front-end with hardcoded buttons for interacting with the machine, and a display of the current state of the machine
    - Make InstructionButton look nice
    - ‚úÖ Add ability to delete an instruction from the "Instructions to send" column
    - Add ability to edit an instruction from the "Instructions to send" column
    - Add ability to set page size when creating a machine
    - Would we like a step button for executing instructions?
        - With undo/redo?
    - Add an observer to the machine that sends updates to the front-end
    - For the observers and the web page -- can the observer be a websocket connections that sends updates?
- add in-vm memory of a specified capacity
    - ‚úÖ start with creating a single page of memory, add support for adding up to n pages via stack instruction; check that max size is not exceeded
      - ‚úÖ (memory (export "meme") 1 10) requests a block of memory that's 1 page long, with a maximum of 10 pages
      - how do we want the "export" keyword to work?
      - what about endianess? how do we want to handle it here?
- use the new in-vm memory for... come up with something. storing values at arbitrary locations via instruction?
- store local variables, eg (local $index i32)
    - find out if this is only in function scope
- read from host system memory
- write to host system memory
- add observers for in-vm memory
- `Le` instruction
- `Ge` instruction

- ‚úÖ multiply instruction
- ‚úÖ division instruction
- ‚úÖ eq instruction
- ‚úÖ eqz instruction
- ‚úÖ `Lt` instruction
- ‚úÖ `Gt` instruction
